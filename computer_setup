#!/usr/bin/env bash

set -e

########### Variables ###########
get_config=""
proton_drive_email=""
config_exists=false
current_dir=$(pwd)
timestamp=$(date +%s)
disable_install_apps=false
drive_folder=""

########### Applications ###########
brew_apps=(
  git
  zsh
  zsh-completions
  zsh-syntax-highlighting
  zsh-autosuggestions
  go
  awscli
  aws-iam-authenticator
  terraform
  helm
  argocd
  stow
  tflint
  terraform-docs
  golangci-lint
  eza
  node@22
  rustup
  # sketchybar
  lua
  gh
)

brew_cask_apps_base=(
  ghostty
  arc
  spotify
  visual-studio-code
  slack
  alt-tab
  proton-drive
  discord
  vlc
  bambu-studio
  parsec
  ollama
  podman-desktop
  nikitabobko/tap/aerospace
  yaak
  autodesk-fusion
  zen-browser
  font-space-mono-nerd-font
  steam
  cursor
)

brew_tap_apps=(
  FelixKratz/formulae
)

########### Kubectl Plugins ###########
kubectl_plugins=(

)

########### Services ###########
services=(
  # sketchybar
)

########### Dock ###########
dock_apps=(
  "Spotify"
  "Slack"
  "Arc"
)

dock_system_apps=(
  "Finder"
)

########### Functions ###########
function install_macos_apps() {
  # Install xcode command line tools
  echo "üïë Installing xcode command line tools."
  if command -v xcode-select -p >/dev/null; then
    echo "‚è© Xcode command line tools seems to already be installed; skipping."
  else
    xcode-select --install
    echo "‚úÖ Xcode command line tools installed."
  fi

  # Install homebrew
  echo "üïë Installing brew."
  if command -v /opt/homebrew/bin/brew >/dev/null; then
    echo "‚è© Brew seems to already be installed; skipping."
  else
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    echo "‚úÖ Brew installed."
  fi

  # install rosetta
  echo "üïë Installing rosetta."
  if $(/usr/sbin/softwareupdate --install-rosetta --agree-to-license >/dev/null 2>&1); then
    echo "‚úÖ Rosetta installed."
  else
    echo "‚ùå Rosetta failed to install."
  fi

  # install brew tap
  echo "üïë Tapping brew apps."
  brew_tap_install
  echo "‚úÖ Brew apps tapped."

  # install brew apps
  echo "üïë Installing brew apps."
  brew_apps_install
  echo "‚úÖ Brew apps installed."

  # install brew cask apps
  echo "üïë Installing brew cask apps."
  brew_cask_apps_install
  echo "‚úÖ Brew cask apps installed."
}

# install brew tap
function brew_tap_install() {
  for app in "${brew_tap_apps[@]}"; do
    if ! $(/opt/homebrew/bin/brew tap | grep "$app" >/dev/null 2>&1); then
      echo "üïë Tapping $app."
      /opt/homebrew/bin/brew tap $app >/dev/null 2>&1 && echo "‚úÖ $app tapped." || echo "‚ùå $app failed to tap."
    else 
      echo "‚è© $app seems to already be tapped; skipping."
    fi
  done
}

# install brew apps if not installed
function brew_apps_install() {
  for app in "${brew_apps[@]}"; do
    if ! $(/opt/homebrew/bin/brew list $app >/dev/null 2>&1); then
      echo "üïë Installing $app."
      /opt/homebrew/bin/brew install $app >/dev/null 2>&1 && echo "‚úÖ $app installed." || echo "‚ùå $app failed to install."
    else 
      echo "‚è© $app seems to already be installed; skipping."
    fi
  done
}

# install brew cask apps if not installed
function brew_cask_apps_install() {
  brew_cask_apps=("${brew_cask_apps_base[@]}")
  for app in "${brew_cask_apps[@]}"; do
    mac_name=$(app_rename $app)
    if ! $(/opt/homebrew/bin/brew list $app >/dev/null 2>&1) && [[ -z $(ls /Applications | tr '[:upper:]' '[:lower:]' | grep "$mac_name") ]]; then
      echo "üïë Installing $app."
      /opt/homebrew/bin/brew install --cask $app >/dev/null 2>&1 && echo "‚úÖ $app installed." || echo "‚ùå $app failed to install."
    else 
      echo "‚è© $app seems to already be installed; skipping."
    fi
  done
}

## Upgrade brew apps
function upgrade_apps() {
  echo "üïë Upgrading brew apps."
  if $(/opt/homebrew/bin/brew upgrade >/dev/null 2>&1); then
    echo "‚úÖ Brew apps Upgraded."
  else
    echo "‚ùå Brew apps failed to upgrade."
  fi
}

## Check if Proton Drive is ready
function proton_drive_is_ready() {
  if [[ -z $proton_drive_email ]]; then
    echo "no email"
  fi
  if [[ -z $(ls ~/Library/CloudStorage | grep "$drive_folder") ]]; then
    echo "no proton drive folder"
  else
    drive_folder=$(ls ~/Library/CloudStorage | grep "ProtonDrive")
    echo "proton drive ready"
  fi
}

## Stow folders
function stow_folders() {
  if [[ ! -d ~/.config ]]; then
    mkdir ~/.config
  fi
  cd ~/.dotfiles
  echo "üïë Stowing folders."
  /opt/homebrew/bin/stow -R -t ~ git
  cd zsh
  /opt/homebrew/bin/stow -R -t ~ config
  cd ..
  /opt/homebrew/bin/stow -R -t ~ tfswitch
  /opt/homebrew/bin/stow -R -t ~ aerospace
  # ln -sf ~/.dotfiles/sketchybar ~/.config/sketchybar
  ln -sf ~/.dotfiles/nvim ~/.config/nvim
  echo "‚úÖ Folders stowed."
}

## Configure Ghostty
function ghostty_config() {
  echo "üïë Copy Ghostty configuration file"
  if [[ ! -d "$HOME/Library/Application Support/com.mitchellh.ghostty" ]]; then
    echo "‚ùå no configuration folder"
    mkdir "$HOME/Library/Application Support/com.mitchellh.ghostty"
  fi
  if [ ! -L "$HOME/Library/Application Support/com.mitchellh.ghostty/config" ]; then
    rm -rf "$HOME/Library/Application Support/com.mitchellh.ghostty/config"
  fi
  ln -sf ghostty/config ~/Library/Application\ Support/com.mitchellh.ghostty/config
  echo "‚úÖ Ghostty configuration done"
}

function app_rename() {
  case $1 in
    alt-tab)
      echo "alttab"
      ;;
    visual-studio-code)
      echo "visual studio code"
      ;;
    bambu-studio)
      echo "bambustudio"
      ;;
    proton-drive)
      echo "proton drive"
      ;;
    *)
      echo $1
      ;;
  esac
}

function get_private_config() {
  echo "üïë Checking if Proton Drive is ready for getting private config."
  status=$(proton_drive_is_ready)
  if [[ "$status" != "proton drive ready" ]]; then
    echo "‚ùå Proton Drive not ready; $status; skipping."
    return
  fi
  echo "üïë Getting private config."
  mkdir -p ~/{.aws,.kube}
  cd ~/Library/CloudStorage/$drive_folder/dotfiles/personal
  /opt/homebrew/bin/stow -t ~/.kube kube
  /opt/homebrew/bin/stow -t ~/.kube aws
  cd ~
  echo "‚úÖ Private config retrieved."
}

function macos_config_command() {
  # Disable .DS_Store files on network volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores true
  # Remove finder tags
  defaults write com.apple.finder ShowRecentTags -bool false
  # Change scroll direction to natural
  defaults write -g com.apple.swipescrolldirection -bool false
  # Dock icon size
  defaults write com.apple.dock tilesize -int 32
  # Disable last used app in dock
  defaults write com.apple.dock show-recents -bool false
  # Clear dock
  defaults write com.apple.dock persistent-apps -array
  # Group windows by application in dock
  defaults write com.apple.dock expose-group-apps -bool true
  # Hide dock
  # defaults write com.apple.dock autohide -bool true
  # Dock autohide delay
  # defaults write com.apple.dock autohide-delay -float 0
  # Dock autohide animation
  # defaults write com.apple.dock autohide-time-modifier -float 0
  # Hide top menu bar
  # defaults write NSGlobalDomain _HIHideMenuBar -bool true
  # Disable window animations
  defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
  # Disable bouncing dock icons
  defaults write com.apple.dock no-bouncing -bool true
  # Move windows by dragging anywhere
  defaults write -g NSWindowShouldDragOnGesture -bool true
  # Application in dock
  # for app in "${dock_apps[@]}"; do
  #   app_escaped=$(echo "$app" | sed 's/ /\\ /g')
  #   defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/'$app_escaped'.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
  # done
  # # System apps in dock
  # for app in "${dock_system_apps[@]}"; do
  #   defaults write com.apple.dock persistent-others -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/System/Applications/'$app'.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
  # done

  # Kill dock
  killall Dock
}

## Configure kubectl
function kubectl_configure() {
  echo "üïë Configuring kubectl."
  echo "üïë Install Krew."
  cd "$(mktemp -d)" &&
    OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
    ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
    KREW="krew-${OS}_${ARCH}" &&
    curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
    tar zxvf "${KREW}.tar.gz" &&
    ./"${KREW}" install krew >/dev/null 2>&1 && echo "‚úÖ Krew installed." || echo "‚ùå Krew failed to install."
  
  cd $current_dir
  echo "üïë Installing kubectl plugins."
  for plugin in "${kubectl_plugins[@]}"; do
    if ! $(/opt/homebrew/bin/kubectl krew list | grep "$plugin" >/dev/null 2>&1); then
      echo "üïë Installing $plugin."
      /opt/homebrew/bin/kubectl krew install "$plugin" >/dev/null 2>&1 && echo "‚úÖ $plugin installed." || echo "‚ùå $plugin failed to install."
    else 
      echo "‚è© $plugin seems to already be installed; skipping."
    fi
  done
}

## Get git repos
function get_git_repo() {
  echo "üïë Getting git repos."
  echo "üïë Checking if Proton Drive is ready for getting repo list."
  status=$(proton_drive_is_ready)
  if [[ "$status" != "proton drive ready" ]]; then
    echo "‚ùå Proton Drive not ready; $status; skipping."
    return
  fi
  echo "üïë Getting git repo for personal computer."
  mkdir -p ~/{personal,biz}
  clone_repos personal
}

## Clone repos from repo list in Proton Drive
function clone_repos() {
  folder=$1
  cd ~/$folder
  if [[ -z $(test ~/Library/CloudStorage/$drive_folder/dotfiles/personal/git-repos) ]]; then
    echo "‚ùå No git repos list found; skipping."
    return
  else
    for repo in $(cat ~/Library/CloudStorage/$drive_folder/dotfiles/personal/git-repos); do
      git clone "$repo"
    done
  fi
  cd ..
}

## Configure ssh config
function stow_ssh_config() {
  echo "üïë Configuring ssh config."
  echo "üïë Checking if Proton Drive is ready for getting ssh config."
  status=$(proton_drive_is_ready)
  if [[ "$status" != "proton drive ready" ]]; then
    echo "‚ùå Proton Drive not ready; $status; skipping."
    return
  fi

  echo "üïë Getting ssh config."
  if [ -d ~/.ssh ]; then
    mv ~/.ssh ~/.ssh-old-$timestamp
  fi
  mkdir -p ~/.ssh
  cd ~/Library/CloudStorage/$drive_folder/dotfiles/personal
  /opt/homebrew/bin/stow -R -t ~/.ssh ssh
  cd ~
  echo "‚úÖ Ssh config retrieved."
}

## Configure terraform
function terraform_config() {
  echo "üïë Configuring terraform."
  cd ~/.dotfiles
  /opt/homebrew/bin/stow -R -t ~/ terraform
  echo "‚úÖ Terraform config retrieved."
}

function install_fonts() {
  "üïë Installing fonts."
  cd ~/.dotfiles/fonts
  cp * ~/Library/Fonts
  echo "‚úÖ Fonts installed."
}

## Get script config
function get_script_config() {
  if [[ -f .config ]]; then
    get_config=$(cat .config | grep get_config | cut -d "=" -f2)
    proton_drive_email=$(cat .config | grep proton_drive_email | cut -d "=" -f2)
    config_exists=true
  fi

  if [[ "$config_exists" == "false" ]]; then
    echo "‚ùì Get private config from Proton Drive? (y/n)"
    read -r get_config

    if [ "$get_config" == "y" ]; then
      echo "‚ùì Enter Proton Drive email:"
      read -r proton_drive_email
    fi

    echo "get_config=$get_config" >>.config
    echo "proton_drive_email=$proton_drive_email" >>.config
  fi
}

## Configure computer based on config
function configure_computer() {
  if [[ "$disable_install_apps" == "false" ]]; then
    install_macos_apps
  fi
  proton_drive_is_ready
  stow_ssh_config
  terraform_config
  stow_folders
  get_private_config
  kubectl_configure
  macos_config_command
  ghostty_config
  # get_git_repo
}

## Start services
function start_services() {
  echo "üïë Starting services."
  for service in "${services[@]}"; do
    echo "üïë Starting $service."
    brew services start $service >/dev/null 2>&1 && echo "‚úÖ $service started." || echo "‚ùå $service failed to start."
  done
  echo "‚úÖ Services started."
}

########### Main ###########
case $1 in
  upgrade| -u | --upgrade)
    echo "üïë Upgrading all apps."
    upgrade_apps
    echo "‚úÖ All apps upgraded."
    exit 0
    ;;
  configure_computer | -c | --configure_computer)
    if [[ $2 == "--no-install-app" ]] || [[ $2 == "-nia" ]]; then
      disable_install_apps=true
    fi
    echo "üïë Configuring computer."
    get_script_config
    configure_computer
    exit 0
    ;;
  configure_computer | -ia | --install-apps)
    echo "üïë Installing apps."
    install_macos_apps
    exit 0
    ;;
  interface | -i | --interface)
    echo "üïë Configuring interface."
    macos_config_command
    exit 0
    ;;
  debug | -d | --debug)
    echo "üïë Debugging."
    get_script_config
    echo "get_config=$get_config"
    echo "proton_drive_email=$proton_drive_email"
    echo "proton_drive_status=$(proton_drive_is_ready)"
    echo "current_dir=$current_dir"
    echo "‚úÖ Debugging complete."
    exit 0
    ;;
  * | -h | --help)
    echo "‚è© Valid options are:"
    echo "     Upgrade all apps >> upgrade | -u | --upgrade"
    echo "     Configure computer >> configure_computer | -c | --configure_computer"
    echo "     Configure computer without installing apps >> configure_computer -c --no-install-app | -nia"
    echo "     Install apps >> configure_computer -ia | --install-apps"
    echo "     Configure interface >> interface | -i | --interface"
    echo "     Debug >> debug | -d | --debug"
    echo "     Help >> * | -h | --help"
    exit 0
    ;;
esac

